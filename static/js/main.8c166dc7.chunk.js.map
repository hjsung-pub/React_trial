{"version":3,"sources":["components/PhoneForm.js","components/PhoneInfo.js","components/PhoneInfoList.js","App.js","reportWebVitals.js","index.js"],"names":["PhoneForm","state","name","phone","isBlank","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onCreate","onSubmit","this","className","placeholder","onChange","type","Component","PhoneInfo","editing","handleRemove","info","onRemove","id","handleToggleEdit","prevProps","prevState","onUpdate","nextProps","nextState","console","log","style","border","padding","margin","onClick","defaultProps","PhoneInfoList","data","list","map","index","warn","App","information","keyword","handleCreate","concat","filter","handleUpdate","filteredList","indexOf","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c166dc7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass PhoneForm extends Component {\n    state = {\n        name : '',\n        phone : '',\n        isBlank : false\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n            isBlank : e.target.value !== ''\n        });\n    }\n    handleSubmit = (e) => {\n        e.preventDefault(); //페이지 리로딩 방지\n        if(!this.state.isBlank){return;}\n        this.props.onCreate(this.state); // 상태값을 onCreate 를 통하여 부모에게 전달\n        this.setState({ // 상태 초기화\n            name : '',\n            phone : '',\n            isBlank : false\n        })\n    }\n  \n    render(){\n        return(\n            <div>\n                <h3>Phone Book</h3>\n                <form onSubmit={this.handleSubmit} className=\"form-box\">\n                    <input \n                        name=\"name\"\n                        placeholder=\"이름\"\n                        value={this.state.name}\n                        onChange={this.handleChange}\n                    />\n                    <input \n                        type =\"number\"\n                        name=\"phone\"\n                        placeholder=\"전화번호\"\n                        value={this.state.phone}\n                        onChange={this.handleChange}\n                    />\n                    <span className=\"form-txt\">{this.state.isBlank ? '작성중' : '작성해주세요'}</span>\n                    <div className=\"form-info\">{this.state.name} {this.state.phone}</div>\n                    <button type=\"submit\" className=\"btn-txt blue\">등록</button>\n                </form>\n            </div>\n        );\n    }\n}\n\n\nexport default PhoneForm;\n","import React, { Component } from 'react'\n\nexport default class PhoneInfo extends Component {\n    static defaultProps = {\n        info : {\n            name : '이름',\n            phone : '010-1234-5678',\n            id: 0\n        }\n    }\n\n    //update \n    state = {\n        //수정버튼을 눌렀을 때 edting 값을 true로 설정\n        //이 값이 true일때, 기존에 텍스트 형태로 보여주던 값들을 input 형태로 보여주게 됨.\n        editing : false,\n        //input의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도 설정\n        name : '',\n        phone : ''\n    }\n    \n    handleRemove = () => {\n        //삭제버튼이 클릭되면 onRemove에 id 넣어서 호출\n        const {info, onRemove} = this.props;\n        onRemove(info.id);\n    }\n\n    //editing값을 반전시키는 함수\n    handleToggleEdit = () => {\n        const {editing} = this.state;\n        this.setState({\n            editing : !editing\n        });\n    }\n    //input에서 onChange 이벤트가 발생 될 때 호출되는 함수\n    handleChange = (e) =>{\n        const {name, value} = e.target;\n        this.setState({\n            [name] : value\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        //여기서는 editing 값이 바뀔 때 처리 할 로직이 적혀있다.\n        //수정을 눌렀을 땐, 기존의 값이 Input에 나타나고,\n        //수정을 적용할땐, input값들이 부모한테 전달해준다.\n\n        const {info, onUpdate} = this.props;\n        if(!prevState.editing && this.state.editing){\n            //editing값이 true로 전환될때 info의 값을 state에 넣어준다.\n            this.setState({\n                name : info.name,\n                phone : info.phone\n            })\n        }\n        if(prevState.editing && !this.state.editing){\n            //editing값이 false로 전환될때\n            onUpdate(info.id, {\n                name:this.state.name,\n                phone:this.state.phone\n            });\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        //수정상태가 아니고, info 값이 같다면 리렌더링 안함\n        if(!this.state.editing && !nextState.editing && nextProps.info === this.props.info){\n            return false;\n        }\n        //나머지 경우에 리렌더링함\n        return true;\n    }\n\n    render() {\n        console.log('render PhoneInfo :' + this.props.info.id);\n        const style = {\n            border : '1px solid #000',\n            padding : '8px',\n            margin : '8px'\n        }\n       \n        const {editing} = this.state;\n\n        if(editing){//수정모드\n\n            return(\n                <div style={style}>\n                    <input\n                        value={this.state.name}\n                        name = \"name\"\n                        placeholder = \"이름\"\n                        onChange = {this.handleChange}\n                    />\n                    <input\n                        value={this.state.phone}\n                        name = \"phone\"\n                        placeholder = \"전화번호\"\n                        onChange = {this.handleChange}\n                    />\n                    <button onClick={this.handleRemove} className=\"btn-small d-gray\">삭제</button>\n                    <button onClick={this.handleToggleEdit} className=\"btn-small blue\">적용</button>\n                </div>\n            )\n        }\n        //일반모드\n        const {name, phone} = this.props.info;\n        return (\n            <ul style={style}>\n                <li><b>{name}</b></li>\n                <li>{phone}</li>\n                <button onClick={this.handleRemove} className=\"btn-small l-gray\">삭제</button>\n                <button onClick={this.handleToggleEdit} className=\"btn-small blue\">수정</button>\n            </ul>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport PhoneInfo from './PhoneInfo';\n\nexport default class PhoneInfoList extends Component {\n    static defaultProps= {\n        data : [],\n        onRemove : () => console.warn(\"onRemove not defined\"),\n        onUpdate : () => console.warn(\"onUpdate not defined\"),\n    }\n\n    //다음 받아올 data가 현재 data랑 다른 배열일때 true로 설정\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps.data !== this.props.data;\n    }\n    \n\n    render() {\n        console.log('render PhoneInfoList');\n        const {data, onRemove, onUpdate} = this.props;\n        const list = data.map(\n            (info, index) => (\n            <PhoneInfo \n                key={index} \n                info={info} \n                onRemove={onRemove}\n                onUpdate={onUpdate}\n            />)\n        )\n\n        return (\n            <div>\n                <h3>Phone Book List</h3>\n                {list}\n            </div>\n        )\n    }\n}\n","import './App.css';\nimport React, { Component }  from 'react';\nimport PhoneForm from './components/PhoneForm';\nimport PhoneInfoList from './components/PhoneInfoList';\n\nclass App extends Component  {\n  \n  id = 2;\n  state = {\n      information : [\n          {\n              id : 0,\n              name : 'heejun',\n              phone : '010-0000-0000'\n          },\n          {\n              id : 1,\n              name : 'heeman',\n              phone : '010-1111-1111'\n          }\n      ],\n      keyword : ''\n  }\n\n  handleCreate = (data) =>{\n    console.log(\"data \", data);\n    const {information} = this.state;\n    console.log(\"information \", information);\n    // const {name} = this.state.information[1];\n    // console.log(\"name\",name);\n    this.setState({\n      information : information.concat({\n        id : this.id++, \n        ...data\n      })\n    });\n  }\n\n  handleRemove = (id) =>{\n    console.log(\"id : \" , id);\n    const {information} = this.state;\n    this.setState({\n      information : information.filter(info => info.id !== id)\n    });\n  }\n\n  handleUpdate = (id, data) => {\n    const {information} = this.state;\n    this.setState({\n      information : information.map(\n        info => id === info.id ? {...info, ...data} : info\n      )\n    });\n  }\n\n  handleChange = (e) =>{\n    this.setState({\n      keyword : e.target.value\n    });\n  }\n\n  render(){\n    const {information, keyword} = this.state;\n    const filteredList = information.filter(\n      info => info.name.indexOf(keyword) !== -1\n    );\n\n    return (\n      <div>\n        <PhoneForm onCreate={this.handleCreate} />\n        {JSON.stringify(information)}\n        <p className=\"ipt-wrap\">\n          <input \n            placeholder=\"검색 할 이름을 입력\"\n            onChange={this.handleChange}\n            value={keyword}\n            className=\"ipt\"\n          />\n        </p>\n        <PhoneInfoList \n          // data={this.state.information} 필터링 기능구현 전 코드\n          data = {filteredList}\n          onRemove={this.handleRemove}\n          onUpdate = {this.handleUpdate}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}